/* Generated by opensource COBOL 4J 1.0.22 */
import java.io.UnsupportedEncodingException;
import jp.osscons.opensourcecobol.libcobj.*;
import jp.osscons.opensourcecobol.libcobj.common.*;
import jp.osscons.opensourcecobol.libcobj.data.*;
import jp.osscons.opensourcecobol.libcobj.exceptions.*;
import jp.osscons.opensourcecobol.libcobj.termio.*;
import jp.osscons.opensourcecobol.libcobj.call.*;
import jp.osscons.opensourcecobol.libcobj.file.*;
import jp.osscons.opensourcecobol.libcobj.ui.*;
import java.util.Optional;
import java.lang.NullPointerException;
import java.lang.IndexOutOfBoundsException;

public class prog implements CobolRunnable {

  private boolean initialized = false;
  private CobolModule cobolCurrentModule;
  private CobolModule module;
  private int entry;

  private CobolRunnable cob_unifunc;


  @Override
  public int run(CobolDataStorage... argStorages) {
    return prog_(0, argStorages);
  }

  @Override
  public void cancel() {
    prog_(-1);
  }

  @Override
  public boolean isActive() {
    return false;
  }

  public CobolResultSet execute () {
    int returnCode = run_module(0);
    return new CobolResultSet(returnCode);
  }

  public int prog_ (int entry, CobolDataStorage ...argStorages) {
    this.entry = entry;
    return this.run_module(entry);
  }

  int run_module (int entry) {
    this.module = new CobolModule(null, null, null, null, 0, '.', '$', ',', 1, 1, 1, 0, null );

    /* Start of function code */

    /* CANCEL callback handling */
    if (entry < 0) {
    	if (!this.initialized) {
    		CobolDecimal.cobInitNumeric();
    		return 0;
    	}
    	this.initialized = false;
    	return 0;
    }

    /* Push module stack */
    CobolModule.push (module);

    /* Initialize program */
    if (!this.initialized) {
      module.setProgramId("prog");

      b_RETURN_CODE.set((int)0);
      b_num1.setByte('0');
      b_num2.fillBytes('0', 2);
      this.initialized = true;
    }
    /* PROCEDURE DIVISION */
    try{
      CobolStopRunException.dummy();
      CobolGoBackException.dummy();
      /* Entry dispatch */
      execEntry(l_prog);

    } catch(CobolGoBackException e) {
      return e.getReturnCode();
    } catch(CobolStopRunException e) {
      CobolStopRunException.stopRun();
      System.exit(e.getReturnCode());
    }
    /* Pop module stack */
    CobolModule.pop();

    /* Program return */
    return b_RETURN_CODE.intValue();
  }
  public CobolControl[] contList = {
    new CobolControl(0, CobolControl.LabelType.label) {
      public Optional<CobolControl> run() throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {

        return Optional.of(contList[l_prog]);
      }
    },
    /* Entry prog */
    new CobolControl(l_prog, CobolControl.LabelType.label) {
      public Optional<CobolControl> run() throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {

        return Optional.of(contList[l_MAIN]);
      }
    },
    /* MAIN SECTION */
    new CobolControl(l_MAIN, CobolControl.LabelType.section) {
      public Optional<CobolControl> run() throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {

        return Optional.of(contList[l_MAIN_SECTION__DEFAULT_PARAGRAPH]);
      }
    },
    /* MAIN_SECTION__DEFAULT_PARAGRAPH */
    new CobolControl(l_MAIN_SECTION__DEFAULT_PARAGRAPH, CobolControl.LabelType.label) {
      public Optional<CobolControl> run() throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {
        /* prog.cbl:13: MOVE */
        {
          f_num2.moveFrom (f_num1);
        }
        /* prog.cbl:14: IF */
        {
          if (((long)b_num1.cmpNumdisp (1, 0) == 0L))
            {
              /* prog.cbl:15: DISPLAY */
              {
                CobolTerminal.display (0, 1, 1, c_1_hellO);
              }
            }
          else
            {
              /* prog.cbl:17: DISPLAY */
              {
                CobolTerminal.display (0, 1, 1, c_2_world);
              }
            }
        }
        /* prog.cbl:19: DISPLAY */
        {
          CobolTerminal.display (0, 1, 1, f_num1);
        }
        return Optional.of(CobolControl.pure());
      }
    },
    CobolControl.pure()
  };
  public void execEntry(int start) throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {
    Optional<CobolControl> nextLabel = Optional.of(contList[start]);
    while(nextLabel.isPresent()) {
      CobolControl section = nextLabel.get();
      nextLabel = section.run();
    }
  }

  public static void main(String[] args)
  {
    CobolUtil.cob_init(args, false);
    CobolDecimal.cobInitNumeric();
    new prog().prog_(0);
    CobolStopRunException.stopRun();
  }

  public prog()
  {
    init();
  }

  public void init() 
  {
    try {
      /* Data storage */

      cob_unifunc = null;

      /* PROGRAM-ID : prog */
      b_RETURN_CODE = new CobolDataStorage(4);	/* RETURN-CODE */
      b_num1 = new CobolDataStorage(1);	/* num1 */
      b_num2 = new CobolDataStorage(2);	/* num2 */

      /* End of data storage */


      initAttr();

      /* Fields */

      /* PROGRAM-ID : prog */
      f_num1	= CobolFieldFactory.makeCobolField(1, b_num1, a_2);	/* num1 */
      f_num2	= CobolFieldFactory.makeCobolField(2, b_num2, a_1);	/* num2 */

      /* End of fields */


      /* Constants */

      c_1_hellO	= CobolFieldFactory.makeCobolField(5, str_0_hellO, a_3);
      c_2_world	= CobolFieldFactory.makeCobolField(5, str_1_world, a_3);

    } catch(NullPointerException e) {
      System.out.println("Error - NullpointerException");
    } catch(IndexOutOfBoundsException e) {
      System.out.println("Error - IndexOutOfBoundsException");
    }
  }

  private void initAttr() {
    /* Attributes */

    a_1 = new CobolFieldAttribute (16, 2, 0, 0, null);
    a_2 = new CobolFieldAttribute (16, 1, 0, 0, null);
    a_3 = new CobolFieldAttribute (33, 0, 0, 0, null);

  }

  /* Data storage */

  /* PROGRAM-ID : prog */
  private CobolDataStorage b_RETURN_CODE;	/* RETURN-CODE */
  private CobolDataStorage b_num1;	/* num1 */
  private CobolDataStorage b_num2;	/* num2 */

  /* End of data storage */


  /* Fields */

  /* PROGRAM-ID : prog */
  private AbstractCobolField f_num1;	/* num1 */
  private AbstractCobolField f_num2;	/* num2 */

  /* End of fields */


  private static AbstractCobolField f_native;

  /* Constants */

  private AbstractCobolField c_2_world;
  private AbstractCobolField c_1_hellO;

  /* Attributes */

  private CobolFieldAttribute a_3;
  private CobolFieldAttribute a_2;
  private CobolFieldAttribute a_1;



  /* String literals */
  public static final byte[] str_1_world = CobolUtil.stringToBytes("world");
  public static final byte[] str_0_hellO = CobolUtil.stringToBytes("hellO");

  /* Sections and Labels */
  private final static int l_prog = 1;
  private final static int l_MAIN = 2;
  private final static int l_MAIN_SECTION__DEFAULT_PARAGRAPH = 3;
  private final static int l_Default_Error_Handler = 4;

}
